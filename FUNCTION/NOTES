In JavaScript, a function is a block of reusable code that performs a specific task or set of tasks. Functions are essential for organizing and modularizing code, making it easier to read, maintain, and reuse. Here's how you define and use functions in JavaScript:

1. **Function Declaration:**
   You can declare a function using the `function` keyword, followed by the function name, a list of parameters enclosed in parentheses, and a code block enclosed in curly braces. Here's a basic example:

   ```javascript
   function greet(name) {
       console.log(`Hello, ${name}!`);
   }
   ```

   In this example, `greet` is the function name, and it takes one parameter `name`.

2. **Function Expression:**
   You can also define functions using function expressions. A function expression assigns a function to a variable. Here's an example:

   ```javascript
   const greet = function(name) {
       console.log(`Hello, ${name}!`);
   };
   ```

3. **Arrow Functions (ES6):**
   Arrow functions provide a more concise way to define functions, especially for simple functions with one expression. Here's an example:

   ```javascript
   const greet = (name) => {
       console.log(`Hello, ${name}!`);
   };
   ```

4. **Function Invocation:**
   To execute a function, you need to call or invoke it using its name followed by parentheses and any required arguments. For example:

   ```javascript
   greet("John"); // Output: Hello, John!
   ```

5. **Return Values:**
   Functions can return values using the `return` keyword. For example:

   ```javascript
   function add(a, b) {
       return a + b;
   }

   const result = add(5, 3);
   console.log(result); // Output: 8
   ```

6. **Function Parameters:**
   Functions can accept parameters (input values) that are used within the function. Parameters are declared within the parentheses when defining the function.

7. **Function Scope:**
   Variables declared inside a function are scoped to that function, which means they are not accessible outside of it.

8. **Anonymous Functions:**
   You can define functions without names, typically used as callbacks or immediately invoked function expressions (IIFE). For example:

   ```javascript
   const multiply = function(x, y) {
       return x * y;
   };
   ```

9. **Higher-Order Functions:**
   JavaScript supports higher-order functions, which are functions that can accept other functions as arguments or return them as results. This is a powerful concept in functional programming.

Here's an example of a higher-order function that takes a callback function as an argument:

```javascript
function doSomething(callback) {
    console.log("Doing something...");
    callback();
}

function sayHello() {
    console.log("Hello!");
}

doSomething(sayHello); // Output: Doing something... Hello!
```

Functions in JavaScript are versatile and can be used for a wide range of tasks, from simple calculations to complex asynchronous operations. They are a fundamental building block of JavaScript programming.